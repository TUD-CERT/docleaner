#!/usr/bin/env python3
import json
import subprocess
import sys
from typing import Any, Dict, Union

from pyhanko.pdf_utils.reader import PdfFileReader


def preprocess_exiftool_metadata(src: bytes) -> Dict[str, Union[bool, Dict[str, Any]]]:
    """Parses JSON document metadata returned by exiftool into a dictionary
    of the form {'doc': {primary document metadata}, 'embeds': {<id>: <metadata of embedded document>}}.
    In addition, filters out some system- and tool-specific metadata."""
    metadata = {"primary": {}, "embeds": {}}
    src_json = json.loads(src.decode("utf-8"))
    if len(src_json) == 0:
        return metadata
    for key, val in src_json.pop().items():
        if key.startswith("File:"):
            # Ignore all File keys except FileSize
            if key == "File:System:FileSize":
                metadata["primary"]["PDF:FileSize"] = val
            continue
        if key.startswith("SourceFile") or key.startswith("ExifTool") or key.startswith("EXIF"):
            # Ignore exiftool-specific metadata
            continue
        top_id = key.split(":")[0]
        if top_id.startswith("Doc"):
            remaining_key = key[key.find(":") + 1:]
            metadata["embeds"].setdefault(top_id, {})
            metadata["embeds"][top_id][remaining_key] = val
        else:
            metadata["primary"][key] = val
    return metadata


def pdf_contains_signatures(path: str) -> bool:
    with open(path, 'rb') as pdf:
        try:
            r = PdfFileReader(pdf)
            return len(r.embedded_signatures) > 0
        except Exception as e:
            print(f"pyHanko Exception: {e}")
            return False


if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: analyze <path_to_pdf> <result_path> <params_path>")
        sys.exit(1)
    src_path = sys.argv[1]
    result_path = sys.argv[2]
    params_path = sys.argv[3]
    result = subprocess.run(["exiftool",
                             "-config",
                             "/opt/exiftool.cfg",
                             "-ee",
                             "-G3:0:1",
                             "-j",
                             src_path],
                            capture_output=True)
    if result.returncode != 0:
        print(f"Error: {result.stderr}")
        sys.exit(1)
    metadata = preprocess_exiftool_metadata(result.stdout)
    metadata["signed"] = pdf_contains_signatures(src_path)
    with open(result_path, "w") as f:
        json.dump(metadata, f)
